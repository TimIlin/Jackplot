class Calculator {
     field ModifiedArray polynomCoefs;
     field int polynomDegree;
     field Array coefsArray;
     
     constructor Calculator new(ModifiedArray coefs) {
          let polynomCoefs = coefs;
          let polynomDegree = polynomCoefs.length() - 1;
          let coefsArray = polynomCoefs.getData();
          return this;
     }

     method int calculateY ( int x ) {
         return CalculateYInScale(x, 1);
     }

     method int CalculateYInScale( int x, int p) {
          var int degree;
          var int result;
          let degree = polynomDegree;
          let result = 0;
          while (true) {
               if (degree < 1) {
                    let result = result + Math.multiply(coefsArray[polynomDegree - degree], p);
                    return result;
               }
               let result = result + Math.divide(Math.multiply(coefsArray[polynomDegree - degree], Calculator.Pow(x, degree)), Calculator.Pow(p, degree - 1));
               let degree = degree - 1;
          }
          return result;
     }

     method ModifiedArray GetCoefs() {
          return polynomCoefs;
     }

     function int Pow ( int base, int degree ) {
          var int index;
          var int result;
          let index = 0;
          let result = 1;
          while (index < degree) {
               let result = Math.multiply(result, base);
               let index = index + 1;
          }
          return result;
     }
}